// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock_art

import (
	art "github.com/plar/go-adaptive-radix-tree"
	mock "github.com/stretchr/testify/mock"
)

// MockIterator is an autogenerated mock type for the Iterator type
type MockIterator struct {
	mock.Mock
}

type MockIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIterator) EXPECT() *MockIterator_Expecter {
	return &MockIterator_Expecter{mock: &_m.Mock}
}

// HasNext provides a mock function with no fields
func (_m *MockIterator) HasNext() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasNext")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIterator_HasNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasNext'
type MockIterator_HasNext_Call struct {
	*mock.Call
}

// HasNext is a helper method to define mock.On call
func (_e *MockIterator_Expecter) HasNext() *MockIterator_HasNext_Call {
	return &MockIterator_HasNext_Call{Call: _e.mock.On("HasNext")}
}

func (_c *MockIterator_HasNext_Call) Run(run func()) *MockIterator_HasNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_HasNext_Call) Return(_a0 bool) *MockIterator_HasNext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIterator_HasNext_Call) RunAndReturn(run func() bool) *MockIterator_HasNext_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockIterator) Next() (art.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 art.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() (art.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() art.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(art.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockIterator_Expecter) Next() *MockIterator_Next_Call {
	return &MockIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockIterator_Next_Call) Run(run func()) *MockIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIterator_Next_Call) Return(_a0 art.Node, _a1 error) *MockIterator_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIterator_Next_Call) RunAndReturn(run func() (art.Node, error)) *MockIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIterator creates a new instance of MockIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIterator {
	mock := &MockIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
